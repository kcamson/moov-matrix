"""
Started from MoonPhase sample by Phil 'PaintYourDragon' Burgess for Adafruit Industries.
MIT license, all text above must be included in any redistribution.
BDF fonts from the X.Org project
"""

# pylint: disable=import-error
import gc
#from lib2to3.pgen2.token import GREATEREQUAL
import time
import math
import json
import board
import busio
import displayio
from rtc import RTC
from adafruit_matrixportal.network import Network
from adafruit_matrixportal.matrix import Matrix
from adafruit_bitmap_font import bitmap_font
import adafruit_display_text.label
import adafruit_lis3dh

try:
    from secrets import secrets
except ImportError:
    print('WiFi secrets are kept in secrets.py, please add them there!')
    raise

# CONFIGURABLE SETTINGS ----------------------------------------------------
  
TWELVE_HOUR = True # If set, use 12-hour time vs 24-hour (e.g. 3:00 vs 15:00)
BITPLANES = 2      # Ideally 6, but can set lower if RAM is tight

RED = 0xFF0000
GREEN = 0x00FF00
YELLOW = 0xFFFF00

UPARROW = '\u2191'
DOWNARROW = '\u2193'
RIGHTARROW = '\u2192'
UPRIGHTARROW = '\u2197'
DOWNRIGHTARROW = '\u2198'
DOUBLEUPARROW = '\u21D1'
DOUBLEDOWNARROW = '\u21D3'

# pylint: disable=too-few-public-methods
class SugarData():
    def __init__(self):
        url = (str(NIGHTSCOUT) + '/api/v1/entries.json?count=5&token=' + str(TOKEN))
        print('Fetching sugar data via', url)

        # pylint: disable=bare-except
        for _ in range(1): # Retries
            try:
                full_data = json.loads(NETWORK.fetch_data(url))
                self.sugarList = []
                for entry in full_data:
                    sugarDetails = {'sgv': entry['sgv'], 'date': entry['date'], 'direction': entry['direction']}
                    sugarDetails['sgv']   = entry['sgv']
                    sugarDetails['date']  = entry['date']
                    sugarDetails['direction'] = entry['direction']
                    sugarDetails['type']  = entry['type']
                    self.sugarList.append(sugarDetails)

                print("DUMP: " + self.sugarList)
                return # Success!
            except:
                # server error (maybe), try again after 15 seconds.
                time.sleep(15)

# ONE-TIME INITIALIZATION --------------------------------------------------

MATRIX = Matrix(bit_depth=BITPLANES)
DISPLAY = MATRIX.display
ACCEL = adafruit_lis3dh.LIS3DH_I2C(busio.I2C(board.SCL, board.SDA),
                                   address=0x19)
_ = ACCEL.acceleration # Dummy reading to blow out any startup residue
time.sleep(0.1)
# Rotate display depending on board orientation
DISPLAY.rotation = (int(((math.atan2(-ACCEL.acceleration.y,
                                     -ACCEL.acceleration.x) + math.pi) /
                         (math.pi * 2) + 0.875) * 4) % 4) * 90

LARGE_FONT = bitmap_font.load_font('/fonts/helvB12.bdf')
SMALL_FONT = bitmap_font.load_font('/fonts/helvR10.bdf')
SYMBOL_FONT = bitmap_font.load_font('/fonts/6x10.bdf')
LARGE_FONT.load_glyphs('0123456789:')
SMALL_FONT.load_glyphs('0123456789:/.%')
# include blood sugar specific glyphs
SYMBOL_FONT.load_glyphs('0123456789.\u2191\u2193\u2192\u2197\u2198\u21D1\u21D3')

GROUP = displayio.Group(max_size=2)

GROUP.append(adafruit_display_text.label.Label(SYMBOL_FONT, color=GREEN,
                                                text='Loading...'))
GROUP[0].x = (DISPLAY.width - GROUP[0].bounding_box[2] + 1) // 2
GROUP[0].y = DISPLAY.height // 2 - 1

DISPLAY.show(GROUP)

NETWORK = Network(status_neopixel=board.NEOPIXEL, debug=True)
NETWORK.connect()

try:
    TIMEZONE = secrets['timezone'] # e.g. 'America/New_York'
except:
    TIMEZONE = None

try:
    TOKEN = secrets['token'] 
except:
    TOKEN = None 

try:
    NIGHTSCOUT = secrets['nightscout'] 
except:
    NIGHTSCOUT = None 

# pylint: disable=bare-except
try:
    DATETIME, UTC_OFFSET = update_time(TIMEZONE)
except:
    DATETIME, UTC_OFFSET = time.localtime(), '+00:00'
LAST_SYNC = time.mktime(DATETIME)

# MAIN LOOP ----------------------------------------------------------------
while True:
    gc.collect()
    NOW = time.time() # Current epoch time in seconds

    # Sync with time server every ~5 min
    if NOW - LAST_SYNC > 5 * 60:
        try:
            DATETIME, UTC_OFFSET = update_time(TIMEZONE)
            LAST_SYNC = time.mktime(DATETIME)
            continue # Time may have changed; refresh NOW value
        except:
            # try again in a minute
            LAST_SYNC += 1 * 60 

    SUGAR = SugarData()

    TEXTCOLOR = GREEN

    try:
        CURRENTSUGAR = SUGAR.sugarList[0]["sgv"]
    except:
        LAST_SYNC += 1 * 60
        continue

    if CURRENTSUGAR > 200:
        TEXTCOLOR = RED
    elif CURRENTSUGAR > 150:
        TEXTCOLOR = YELLOW
    elif CURRENTSUGAR < 60:
        TEXTCOLOR = RED

    CURRENTDIRECTION = SUGAR.sugarList[0]["direction"]

    if CURRENTDIRECTION == "Flat":
        TEXTDIRECTION = RIGHTARROW
    elif CURRENTDIRECTION == "FortyFiveUp":
        TEXTDIRECTION = UPRIGHTARROW
    elif CURRENTDIRECTION == "FortyFiveDown":
        TEXTDIRECTION = DOWNRIGHTARROW
    elif CURRENTDIRECTION == "SingleUp":
        TEXTDIRECTION = UPARROW
    elif CURRENTDIRECTION == "SingleDown":
        TEXTDIRECTION = DOWNARROW
    elif CURRENTDIRECTION == "DoubleUp":
        TEXTDIRECTION = DOUBLEUPARROW
    elif CURRENTDIRECTION == "DoubleDown":
        TEXTDIRECTION = DOUBLEDOWNARROW

    GROUP[0].color_index = TEXTCOLOR
    GROUP[0].text = str(SUGAR.sugarList[0]["sgv"]) + " " + TEXTDIRECTION
    GROUP[0].x = (DISPLAY.width - GROUP[0].bounding_box[2] + 1) // 2
    GROUP[0].y = DISPLAY.height // 2 - 1

    DISPLAY.refresh() # Force full repaint (splash screen sometimes sticks)
    time.sleep(5)